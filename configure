#!/bin/sh

set -e

atexit() {
	local _err="$?"

	# Dump contents of generated files to config.log.
	exec 1>>config.log 2>&1
	set -x
	[ -e config.h ] && cat config.h
	[ -e config.mk ] && cat config.mk
	rm -f "$@"
	[ "$_err" -ne 0 ] && fatal
	exit 0
}

compile() {
	$CC -Werror -o /dev/null -x c - $@
}

fatal() {
	[ $# -gt 0 ] && echo "fatal: ${*}"
	exec 1>&3 2>&4
	cat config.log
	return 1
}

headers() {
	cat >"$TMP1"
	[ -s "$TMP1" ] || return 0

	xargs printf '#include <%s>\n' <"$TMP1"
}

makevar() {
	var="$(printf 'all:\n\t@echo ${%s}\n' "$1" | make -sf -)"
	if [ -n "$var" ]; then
		echo "$var"
	else
		return 1
	fi
}

check_curses() {
	compile $@ <<-EOF
	#include <curses.h>
	#include <term.h>

	int main(void) {
		return !(setupterm(NULL, 1, NULL) != ERR);
	}
	EOF
}

check_dead() {
	compile <<-EOF
	#include <stdlib.h>

	${1} int dead(void);

	int main(void) {
		return 0;
	}
	EOF
}

# Check if strptime(3) is hidden behind _GNU_SOURCE.
check_gnu_source() {
	cat <<-EOF >"$TMP1"
	#include <time.h>

	int main(void) {
		struct tm tm;
		return !(strptime("0", "%s", &tm) != NULL);
	}
	EOF

	compile <"$TMP1" && return 1

	{ echo "#define _GNU_SOURCE"; cat "$TMP1"; } | compile
}

check_pledge() {
	compile <<-EOF
	#include <unistd.h>

	int main(void) {
		return !(pledge("stdio", NULL) == 0);
	}
	EOF
}

check_reallocarray() {
	compile <<-EOF
	#include <stdlib.h>

	int main(void) {
		return !(reallocarray(NULL, 1, 1) != NULL);
	}
	EOF
}

check_strtonum() {
	compile <<-EOF
	#include <stdlib.h>

	int main(void) {
		return !(strtonum("1", 1, 2, NULL) != 0);
	}
	EOF
}

TMP1=$(mktemp -t configure.XXXXXX)
trap "atexit $TMP1" EXIT

exec 3>&1 4>&2
exec 1>config.log 2>&1

# At this point, all variables used must be defined.
set -u
# Enable tracing, will end up in config.log.
set -x

HAVE_CURSES=0
HAVE_DEAD2=0
HAVE_DEAD=0
HAVE_GNU_SOURCE=0
HAVE_NCURSESW=0
HAVE_NORETURN=0
HAVE_PLEDGE=0
HAVE_REALLOCARRAY=0
HAVE_STRTONUM=0

# Order is important, must come first if not defined.
DEBUG="$(makevar DEBUG || :)"

CC=$(makevar CC || fatal "CC: not defined")
CFLAGS=$(DEBUG= makevar CFLAGS || :)
CFLAGS="${CFLAGS} ${DEBUG} -Wall -Wextra -MD -MP"
CPPFLAGS="$(makevar CPPFLAGS || :)"
CPPFLAGS="${CPPFLAGS} -I\${.CURDIR}"
LDFLAGS="$(DEBUG= makevar LDFLAGS || :)"

PREFIX="$(makevar PREFIX || echo /usr/local)"
BINDIR="$(makevar BINDIR || echo "${PREFIX}/bin")"
MANDIR="$(makevar MANDIR || echo "${PREFIX}/man")"
INSTALL="$(makevar INSTALL || echo install)"
INSTALL_MAN="$(makevar INSTALL_MAN || echo install)"

if check_curses -lcurses; then
	HAVE_CURSES=1
	LDFLAGS="${LDFLAGS} -lcurses"
elif check_curses -ltinfow; then
	HAVE_NCURSESW=1
	LDFLAGS="${LDFLAGS} -ltinfow"
elif check_curses -lncursesw; then
	HAVE_NCURSESW=1
	LDFLAGS="${LDFLAGS} -lncursesw"
else
	fatal "curses library not found"
fi

check_dead __dead && HAVE_DEAD=1
check_dead __dead2 && HAVE_DEAD2=1
check_dead '__attribute__((__noreturn__))' && HAVE_NORETURN=1
check_gnu_source && HAVE_GNU_SOURCE=1
check_pledge && HAVE_PLEDGE=1
check_reallocarray && HAVE_REALLOCARRAY=1
check_strtonum && HAVE_STRTONUM=1

# Redirect stdout to config.h.
exec 1>config.h

# Order is important, must be present before any includes.
[ $HAVE_GNU_SOURCE -eq 1 ] && printf '#define _GNU_SOURCE\n'

# Headers needed for function prototypes.
{
[ $HAVE_CURSES -eq 1 ] && echo curses.h term.h
[ $HAVE_NCURSESW -eq 1 ] && echo ncursesw/curses.h ncursesw/term.h
[ $HAVE_PLEDGE -eq 0 ] && echo stdlib.h
[ $HAVE_REALLOCARRAY -eq 0 ] && echo stdlib.h
[ $HAVE_STRTONUM -eq 0 ] && echo stdlib.h
} | sort | uniq | headers

[ $HAVE_PLEDGE -eq 1 ] && printf '#define HAVE_PLEDGE\t1\n'
[ $HAVE_REALLOCARRAY -eq 1 ] && printf '#define HAVE_REALLOCARRAY\t1\n'
[ $HAVE_STRTONUM -eq 1 ] && printf '#define HAVE_STRTONUM\t1\n'

if [ $HAVE_DEAD -eq 1 ]; then
	:
elif [ $HAVE_DEAD2 -eq 1 ]; then
	printf '#define __dead __dead2\n'
elif [ $HAVE_NORETURN -eq 1 ]; then
	printf '#define __dead __attribute__((__noreturn__))\n'
else
	printf '#define __dead\n'
fi

[ $HAVE_PLEDGE -eq 0 ] && \
	printf 'int pledge(const char *, const char *);\n'
[ $HAVE_REALLOCARRAY -eq 0 ] && \
	printf 'void *reallocarray(void *, size_t, size_t);\n'
[ $HAVE_STRTONUM -eq 0 ] && \
	printf 'long long strtonum(const char *, long long, long long, const char **);\n'

# Redirect stdout to config.mk.
exec 1>config.mk

# Use echo to normalize whitespace.
cat <<EOF
CC=		$(echo $CC)
CFLAGS=		$(echo $CFLAGS)
CPPFLAGS=	$(echo $CPPFLAGS)
DEBUG=		$(echo $DEBUG)
LDFLAGS=	$(echo $LDFLAGS)

BINDIR?=	$(echo $BINDIR)
MANDIR?=	$(echo $MANDIR)
INSTALL?=	$(echo $INSTALL)
INSTALL_MAN?=	\${INSTALL}
EOF
